--[[
The string library provides functions to manipulate strings.

String points to an immutable contiguous sequence of characters.
Internally it just holds a pointer to a buffer and a size.
It's buffer is zero terminated by default to have more compatibility with C.

The string type is defined by the compiler, however it does not have
its methods implemented, this module implements all string methods.

When the GC is disabled, you should call `string.destroy` to free the string memory
of non views strings returned by this library, otherwise the memory will leak.
Note that string literals points to a buffer in the program static storage
and such strings should never be destroyed.

Note that all string methods are 1-indexed (like Lua).
]]

require 'memory'
require 'span'
require 'sequence'
require 'allocators.default'
require 'stringbuilder'

local strchar: type = require 'detail.strchar'

--[[
Allocate a new string to be filled with length `size`.

The string is guaranteed to be zero terminated,
so it can safely be used as a `cstring`.
The string data is not initialized.
]]
function string.create(size: usize): string
  check(size > 0, 'attempt to create an empty string')
  local s: string = {
    data = (@*[0]byte)(default_allocator:xalloc(size+1)),
    size = size,
  }
  s.data[size] = 0
  return s
end

--[[
Destroys a string freeing its memory.

This must never be called on string literals.
This function is only needed to be called when not using the GC.
]]
function string:destroy(): void
  if unlikely(self.size == 0) then return end
  default_allocator:dealloc(self.data)
  self.data = nilptr
  self.size = 0
end

--[[
Clone a string, allocating new space.

This is useful in case you want to own the string memory,
so you can modify it or manually manage its memory when GC is disabled.
]]
function string.copy(s: string): string
  local clone: string
  if unlikely(s.size == 0) then return clone end
  clone.data = (@*[0]byte)(default_allocator:xalloc(s.size+1))
  memory.copy(clone.data, s.data, s.size)
  clone.data[s.size] = 0
  clone.size = s.size
  return clone
end

-- Returns the internal numeric codes of the character at position `i`.
function string.byte(s: string, i: facultative(isize)): byte
  ## if i.type.is_niltype then
  local i: isize = 1
  ## end
  -- TODO: j argument and multiple returns
  if unlikely(s.size == 0) then return 0 end
  if unlikely(i < 0) then i = s.size + i + 1 end
  --TODO: return nil instead on failure
  check(i >= 1 and (@usize)(i) <= s.size, 'index out of range')
  return s.data[i-1]
end

--[[
Returns the substring of `s` that starts at `i` and continues until `j` (both inclusive).
Both `i` and `j` can be negative.
If `j` is absent, then it is assumed to be equal to `-1` (which is the same as the string length).
In particular, the call `string.sub(s,1,j)` returns a prefix of `s` with length `j`,
and `string.sub(s, -i)` (for a positive `i`) returns a suffix of `s` with length `i`.
]]
function string.sub(s: string, i: isize, j: facultative(isize)): string
  ## if j.type.is_niltype then
  local j: isize = -1
  ## end
  local size: isize = (@isize)(s.size)
  if unlikely(size == 0) then return (@string){} end
  if unlikely(i < 0) then i = size + i + 1 end
  if unlikely(i <= 0) then i = 1 end
  if unlikely(j < 0) then j = size + j + 1 end
  if unlikely(j > size) then j = size end
  if unlikely(i == 1 and j == size) then return string.copy(s) end
  if unlikely(i > j) then return (@string){} end
  local subsize: usize = (@usize)(j - i + 1)
  if unlikely(subsize == 0) then return (@string){} end
  local ret: string = string.create(subsize)
  memory.copy(&ret.data[0], &s.data[i-1], subsize)
  return ret
end

--[[
Return a view for a sub string in a string.

The main difference between this and `string.sub` is that here we don't allocate a new string,
instead it reuses its memory as an optimization.
Use this only if you know what you are doing, to be safe use `string.sub` instead.

*Remarks*: When using the GC the view will not hold reference to the original string,
thus if you don't hold the original string reference somewhere you will have a dangling reference.
The view string may not be zero terminated, thus you should never
cast it to a `cstring` to use in C functions.
]]
function string.subview(s: string, i: isize, j: facultative(isize)): string
  ## if j.type.is_niltype then
  local j: isize = -1
  ## end
  local size: isize = (@isize)(s.size)
  if unlikely(size == 0) then return (@string){} end
  if unlikely(i < 0) then i = size + i + 1 end
  if unlikely(i <= 0) then i = 1 end
  if unlikely(j < 0) then j = size + j + 1 end
  if unlikely(j > size) then j = size end
  if unlikely(i == 1 and j == size) then return s end
  if unlikely(i > j) then return (@string){} end
  local subsize: usize = (@usize)(j - i + 1)
  if unlikely(subsize == 0) then return (@string){} end
  return (@string){data=&s.data[i-1], size=subsize}
end

--[[
Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
The default value for `sep` is the empty string (that is, no separator).
Returns the empty string if `n` is not positive.
]]
function string.rep(s: string, n: isize, sep: facultative(string)): string
  if unlikely(n <= 0) then return (@string){} end
  if unlikely(n == 1) then return string.copy(s) end
  local n: usize = (@usize)(n)
  ## if sep.type.is_niltype then
  if unlikely(s.size == 0) then return (@string){} end
  local ret: string = string.create(n * s.size)
  for i:usize=0,<n do
    memory.copy(&ret.data[i*s.size], &s.data[0], s.size)
  end
  ## else
  local sep: string = sep
  local partsize: usize = s.size + sep.size
  if unlikely(partsize <= 0) then return (@string){} end
  local ret: string = string.create(n * partsize - sep.size)
  for i:usize=0,<n do
    memory.copy(&ret.data[i*partsize], &s.data[0], s.size)
    if i ~= n-1 then
      memory.copy(&ret.data[i*partsize + s.size], &sep.data[0], sep.size)
    end
  end
  ## end
  return ret
end

-- Returns a string that is the string `s` reversed.
function string.reverse(s: string): string
  if unlikely(s.size == 0) then return s end
  local ret: string = string.create(s.size)
  for i:usize=0,<s.size do
    ret.data[i] = s.data[s.size - i - 1]
  end
  return ret
end

--[[
Receives a string and returns a copy of this string with all lowercase letters changed to uppercase.
All other characters are left unchanged.
The definition of what a lowercase letter is depends on the current locale
only if pragma `useclocale` is set.
]]
function string.upper(s: string): string
  if unlikely(s.size == 0) then return s end
  local ret: string = string.create(s.size)
  for i:usize=0,<s.size do
    ret.data[i] = (@byte)(strchar.toupper(s.data[i]))
  end
  return ret
end

--[[
Receives a string and returns a copy of this string with all uppercase letters changed to lowercase.
All other characters are left unchanged.
The definition of what an uppercase letter is depends on the current locale
only if pragma `useclocale` is set.
]]
function string.lower(s: string): string
  if unlikely(s.size == 0) then return s end
  local ret: string = string.create(s.size)
  for i:usize=0,<s.size do
    ret.data[i] = (@byte)(strchar.tolower(s.data[i]))
  end
  return ret
end

--[[
Receives zero or more integers and returns a string with length equal to the number of arguments,
in which each character has the internal numeric code equal to its corresponding argument.
Numeric codes are not necessarily portable across platforms.
]]
function string.char(...: varargs): string
  local s: string = string.create(#[select('#', ...)]#)
  ## for i=1,select('#', ...) do
  s.data[#[i-1]#] = #[select(i, ...)]#
  ## end
  return s
end

--[[
Returns a formatted version of its variable number of arguments following the description
given in its first argument, which must be a string.
The format string follows the same rules as the ISO C function `sprintf`.
The only differences are that the conversion specifiers and modifiers `*, h, L, l` are not supported.
]]
function string.format(fmt: string, ...: varargs): string
  local sb: stringbuilder
  sb:writef(fmt, ...)
  return sb:promote()
end

--[[
Receives a string and returns its length.
The empty string "" has length 0. Embedded zeros are counted.
]]
function string.len(s: string): isize <inline>
  return (@isize)(s.size)
end

--[[
Fills a `cstring` buffer.
This is mainly used to ensure the string is zero terminated.

Returns `true` in case of success, otherwise `false` when the `buflen` is not enough.
]]
function string.fillcstring(s: string, buf: *[0]cchar, buflen: usize): boolean
  if buf and buflen >= s.size + 1 then
    memory.copy(buf, s.data, s.size)
    buf[s.size] = 0
    return true
  end
  return false
end

--[[
Converts a string to a span of bytes.

Remarks: Similar to `subview` a reference of the current string data is returned.
]]
function string.span(s: string): span(byte) <inline>
  return (@span(byte)){data=s.data, size=s.size}
end

-- Concatenates a span of a strings into a single string.
function string.concat(list: span(string), sep: facultative(string)): string
  ## if sep.type.is_niltype then
  local sep: string = ""
  ## end
  local size: usize
  for i: usize=0,<list.size do
    if i > 0 then size = size + sep.size end
    size = size + list[i].size
  end
  if size == 0 then return (@string){} end
  local s: string = string.create(size)
  local pos: usize = 0
  for i: usize=0,<list.size do
    if sep.size > 0 and i > 0 then
      for j: usize=0,<sep.size do
        s.data[pos] = sep.data[j]
        pos = pos + 1
      end
    end
    local part: string = list[i]
    for j: usize=0,<part.size do
      s.data[pos] = part.data[j]
      pos = pos + 1
    end
  end
  return s
end

----------------------------------------------------------------------------------------------------
-- String metamethods

-- Effectively the same as `destroy`, called when a to-be-closed variable goes out of scope.
function string:__close(): void
  self:destroy()
end

--[[
Returns the reference of byte representing the character at index `i`.
Argument `i` must be an integer between 1 and the string size.
Used when indexing elements with square brackets (`[]`).
]]
function string.__atindex(s: string, i: usize): *byte <inline,nosideeffect>
  check(i >= 1 and i <= s.size, 'index out of range')
  return &s.data[i-1]
end

-- Return length of a string. Used by the length operator (`#`).
function string.__len(a: string): isize <inline>
  return (@isize)(a.size)
end

-- Concatenate two strings. Used by the concatenation operator (`..`).
function string.__concat(a: auto, b: auto): string
  ## if not a.type.is_string then
    local a: string = tostring(a)
    defer a:destroy() end
  ## end
  ## if not b.type.is_string then
    local b: string = tostring(b)
    defer b:destroy() end
  ## end
  if a.size == 0 then
    return string.copy(b)
  elseif b.size == 0 then
    return string.copy(a)
  end
  local s: string = string.create(a.size + b.size)
  memory.copy(s.data, a.data, a.size)
  memory.copy(&s.data[a.size], b.data, b.size)
  return s
end

----------------------------------------------------------------------------------------------------
-- String comparison

-- Compare two strings. Used by the equality operator (`==`).
function string.__eq(a: string, b: string): boolean
  return a.size == b.size and (a.data == b.data or a.size == 0 or memory.equals(a.data, b.data, a.size))
end

--[[
Compare if string `a` is less than string `b` in lexicographical order.
Used by the less than operator (`<`).
]]
function string.__lt(a: string, b: string): boolean
  if unlikely(a.size == 0 or b.size == 0) then
    return a.size < b.size
  else
    if a.size < b.size then
      return memory.compare(a.data, b.data, a.size) <= 0
    else
      return memory.compare(a.data, b.data, b.size) < 0
    end
  end
end

--[[
Compare if string `a` is less or equal than string `b` in lexicographical order.
Used by the less or equal than operator (`<=`).
]]
function string.__le(a: string, b: string): boolean
  if unlikely(a.size == 0 or b.size == 0) then
    return a.size <= b.size
  else
    if a.size <= b.size then
      return memory.compare(a.data, b.data, a.size) <= 0
    else
      return memory.compare(a.data, b.data, b.size) < 0
    end
  end
end

----------------------------------------------------------------------------------------------------
-- String arithmetic operators

-- Concept to check if a value can possibly be a number.
local scalar_coercion_concept: type = #[concept(function(x)
  if x.type.is_stringy then
    return primtypes.string
  elseif x.type.is_integral then
    return primtypes.integer
  elseif x.type.is_float then
    return primtypes.number
  end
  return false, string.format("type '%s' is not convertible to a scalar", x.type)
end)]#

--[[
Converts input strings to numbers and returns the result of addition.
Use by the add operator (`+`).
]]
function string.__add(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a + b
end

--[[
Converts input strings to numbers and returns the result of subtraction.
Use by the subtract operator (`-`).
]]
function string.__sub(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a - b
end

--[[
Converts input strings to numbers and returns the result of multiplication.
Use by the multiply operator (`*`).
]]
function string.__mul(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a * b
end

--[[
Converts input strings to numbers and returns the result of division.
Use by the division operator (`/`).
]]
function string.__div(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a / b
end

--[[
Converts input strings to numbers and returns the result of floor division.
Use by the integer division operator (`//`).
]]
function string.__idiv(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a // b
end

--[[
Converts input strings to numbers and returns the result of truncate division.
Use by the truncate division operator (`///`).
]]
function string.__tdiv(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a /// b
end

--[[
Converts input strings to numbers and returns the result of floor division remainder.
Use by the modulo operator (`%`).
]]
function string.__mod(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a % b
end

--[[
Converts input strings to numbers and returns the result of truncate division remainder.
Use by the truncate module operator (`%%%`).
]]
function string.__tmod(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a %%% b
end

--[[
Converts input strings to numbers and returns the result of exponentiation.
Use by the pow operator (`^`).
]]
function string.__pow(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  local a: number, b: number = tonumber(a), tonumber(b)
  return a ^ b
end

--[[
Converts the input string to a number and returns its negation.
Use by the negation operator (`-`).
]]
function string.__unm(a: scalar_coercion_concept): number
  local a: number = tonumber(a)
  return -a
end

--[[
Converts input strings to integers and returns the result of bitwise AND.
Use by the bitwise AND operator (`&`).
]]
function string.__band(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  local a: integer, b: integer = tointeger(a), tointeger(b)
  return a & b
end

--[[
Converts input strings to integers and returns the result of bitwise OR.
Use by the bitwise OR operator (`|`).
]]
function string.__bor(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  local a: integer, b: integer = tointeger(a), tointeger(b)
  return a | b
end

--[[
Converts input strings to integers and returns the result of bitwise XOR.
Use by the bitwise XOR operator (`~`).
]]
function string.__bxor(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  local a: integer, b: integer = tointeger(a), tointeger(b)
  return a ~ b
end

--[[
Converts input strings to integers and returns the result of bitwise logical left shift.
Use by the bitwise logical left shift operator (`<<`).
]]
function string.__shl(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  local a: integer, b: integer = tointeger(a), tointeger(b)
  return a << b
end

--[[
Converts input strings to integers and returns the result of bitwise logical right shift.
Use by the bitwise logical right shift operator (`>>`).
]]
function string.__shr(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  local a: integer, b: integer = tointeger(a), tointeger(b)
  return a >> b
end

--[[
Converts input strings to integers and returns the result of bitwise arithmetic right shift.
Use by the bitwise arithmetic right shift operator (`>>>`).
]]
function string.__asr(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  local a: integer, b: integer = tointeger(a), tointeger(b)
  return a >>> b
end

--[[
Converts the input string to an integer and returns its bitwise NOT.
Use by the bitwise NOT operator (`~`).
]]
function string.__bnot(a: scalar_coercion_concept): integer
  local a: integer = tointeger(a)
  return ~a
end

----------------------------------------------------------------------------------------------------
-- String pattern matching

local StrPatt: type = require 'detail.strpatt'

--[[
Look for the first match of pattern in the string.

Returns the indices of where this occurrence starts and ends.

The indices will be positive if a match is found, zero otherwise.
A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
A value of true as a fourth, optional argument plain turns off the pattern matching facilities.
]]
function string.find(s: string, pattern: string, init: facultative(isize), plain: facultative(boolean)): (isize, isize)
  ## if init.type.is_niltype then
  local init: isize = 1
  ## else
  if init < 0 then init = (@isize)(s.size) + init + 1 end
  if init <= 0 then init = 1 end
  ## end
  ## if plain.type.is_niltype then
  local plain: boolean = false
  ## end
  local ms: StrPatt = StrPatt.create(s, pattern, plain)
  local startpos: isize, endpos: isize = ms:match(init-1)
  if endpos ~= -1 then -- matched
    return startpos+1, endpos
  else -- no match
    return 0, 0
  end
end

--[[
Returns an iterator function that, each time it is called, returns the whole match plus a span of captures.
A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
]]
function string.gmatch(s: string, pattern: string, init: facultative(isize)): (auto, auto, string)
  ## if init.type.is_niltype then
  local init: isize = 1
  ## else
  if init < 0 then init = (@isize)(s.size) + init + 1 end
  if init <= 0 then init = 1 end
  ## end
  local MAX_CAPTURES <comptime> = 8
  local GMatchState: type = @record{
    ms: StrPatt,
    init: isize,
    captures: [MAX_CAPTURES]string
  }
  local function gmatch_next(state: *GMatchState, it: string): (boolean, string, span(string))
    -- volatile is used to force returns to be aligned (due to GC issue on MinGW 8.1)
    local ok: boolean, matched: string <volatile>, captures: span(string)
    local startpos: isize, endpos: isize = state.ms:match(state.init)
    if endpos ~= -1 then -- matched
      ok = true
      state.init = endpos
      matched = string.copy((@string){data=&state.ms.source.data[startpos], size=(@usize)(endpos-startpos)})
      assert(state.ms.numcaptures <= MAX_CAPTURES, 'too many captures')
      for i:isize=0,<state.ms.numcaptures do
        local ok: boolean, capstr: string, capture: auto = state.ms:get_capture(i)
        assert(ok, capstr)
        assert(not capture:is_position(), 'position capture not supported yet')
        state.captures[i] = string.copy(capstr)
      end
      captures = (@span(string)){data=&state.captures[0], size=(@usize)(state.ms.numcaptures)}
    end
    return ok, matched, captures
  end
  local state: GMatchState = {ms = StrPatt.create(s, pattern, false), init = init-1}
  return gmatch_next, state, (@string){}
end

-- Like `string.gmatch` but uses sub string views (see also `string.subview`).
function string.gmatchview(s: string, pattern: string, init: facultative(isize)): (auto, auto, string)
  ## if init.type.is_niltype then
  local init: isize = 1
  ## else
  if init < 0 then init = (@isize)(s.size) + init + 1 end
  if init <= 0 then init = 1 end
  ## end
  local MAX_CAPTURES <comptime> = 8
  local GMatchState: type = @record{
    ms: StrPatt,
    init: isize,
    captures: [MAX_CAPTURES]string
  }
  local function gmatch_next(state: *GMatchState, it: string): (boolean, string, span(string))
    -- volatile is used to force returns to be aligned (due to GC issue on MinGW 8.1)
    local ok: boolean, matched: string <volatile>, captures: span(string)
    local startpos: isize, endpos: isize = state.ms:match(state.init)
    if endpos ~= -1 then -- matched
      ok = true
      state.init = endpos
      matched = (@string){data=&state.ms.source.data[startpos], size=(@usize)(endpos-startpos)}
      assert(state.ms.numcaptures <= MAX_CAPTURES, 'too many captures')
      for i:isize=0,<state.ms.numcaptures do
        local ok: boolean, capstr: string, capture: auto = state.ms:get_capture(i)
        assert(ok, capstr)
        assert(not capture:is_position(), 'position capture not supported yet')
        state.captures[i] = capstr
      end
      captures = (@span(string)){data=&state.captures[0], size=(@usize)(state.ms.numcaptures)}
    end
    return ok, matched, captures
  end
  local state: GMatchState = {ms = StrPatt.create(s, pattern, false), init = init-1}
  return gmatch_next, state, (@string){}
end

--[[
Returns a copy of `s` in which all (or the first `n`, if given) occurrences of the pattern
have been replaced by a replacement string specified by `repl`,
which can be a string, a string hashmap, or a function.
`gsub` also returns, as its second value, the total number of matches that occurred.

The name `gsub` comes from Global SUBstitution.

* If `repl` is a string, then its value is used for replacement.
The character '%' works as an escape character: any sequence in `repl` of the form '%d',
with d between 1 and 9, stands for the value of the d-th captured substring;
the sequence '%0' stands for the whole match; the sequence '%%' stands for a single %.

If `repl` is a hashmap of strings, then it is queried for every match,
using the first capture as the key and its hashmap value as the replacement string.

If `repl` is a function, then this function is called every time a match occurs
with all captured substrings passed as arguments, in order.

In any case, if the pattern specifies no captures,
then it behaves as if the whole pattern was inside a capture.

If the value returned by the table query or by the function call is a string or a number,
then it is used as the replacement string;
otherwise, if it is false or nil, then there is no replacement (that is, the original match is kept in the string).
]]
function string.gsub(s: string, pattern: string, repl: auto, maxn: facultative(isize)): (string, isize)
  ## if maxn.type.is_niltype then
  local maxn: isize = (@isize)(s.size) + 1
  ## end
  local n: isize = 0 -- replacement count
  local sb: stringbuilder
  local pos: isize = 0
  local ms: StrPatt = StrPatt.create(s, pattern, false)
  local lastmatch: isize = -1
  while n < maxn do
    local startpos: isize, endpos: isize = ms:match(pos)
    if endpos ~= -1 and endpos ~= lastmatch then -- matched
      lastmatch = endpos
      n = n + 1
      local skip: string = (@string){data=&s.data[pos], size=(@usize)(startpos-pos)}
      sb:write(skip)
      local match: string = (@string){data=&s.data[startpos], size=(@usize)(endpos-startpos)}
      local matchrepl: string
      local ri: usize = 0
      ## if repl.type.is_hashmap then
        local ok: boolean, capstr: string, capture: auto = ms:get_capture(0)
        local key: string
        if not ok and ms.numcaptures == 0 then
          key = match
        else
          assert(ok, capstr)
          assert(not capture:is_position(), 'position capture not supported yet')
          key = capstr
        end
        local it: *string = repl:peek(key)
        if it then
          matchrepl = $it
        else
          matchrepl = match
        end
      ## else
        ## if repl.type.is_stringy then -- string replacement
          matchrepl = repl
          --TODO: handle numbers
          while true do -- replace captures
            local found: pointer = memory.scan(&matchrepl.data[ri], '%'_b, matchrepl.size - ri)
            if not found then break end
            local advance: usize = (@usize)(found) - (@usize)(&matchrepl.data[ri])
            sb:write((@string){&matchrepl.data[ri], advance})
            local c: byte = matchrepl.data[ri + advance + 1]
            if c == '%'_b then -- %%
              sb:writebyte('%'_b)
            elseif c == '0'_b then -- %0
              sb:write(match)
            elseif c >= '1'_b and c <= '9'_b then -- should be a digit
              local capindex: isize = c - '1'_b
              local ok: boolean, capstr: string, capture: auto = ms:get_capture(capindex)
              if not ok and capindex == 0 and ms.numcaptures == 0 then
                sb:write(match)
              else
                assert(ok, capstr)
                if capture:is_position() then
                  local s: string = tostring(capture.init+1)
                  sb:write(s)
                  s:destroy()
                else
                  sb:write(capstr)
                end
              end
            else
              error "invalid use of '%' in replacement string"
            end
            ri = ri + advance + 2
          end
        ## elseif repl.type.is_function then -- callback replacement
          local capindex: isize, capstr: string
          ## local args = {}
          ## for i=1,#repl.type.argtypes do
            capindex = #[i-1]#
            local ok: boolean, capstr: string, capture: auto = ms:get_capture(capindex)
            if not ok and capindex == 0 and ms.numcaptures == 0 then
              capstr = string.copy(match)
            else
              assert(ok, capstr)
              if capture:is_position() then
                capstr = tostring(capture.init+1)
              else
                capstr = string.copy(capstr)
              end
            end
            local #|'a'..i|#: string = capstr
            ## table.insert(args, aster.Id{'a'..i})
          ## end
          ## if repl.type:get_return_type(1).is_string then -- function that returns the replacement
            matchrepl = repl(#[aster.unpack(args)]#)
            defer matchrepl:destroy() end
          ## else -- call function and replace original match
            matchrepl = match
            repl(#[aster.unpack(args)]#)
          ## end
        ## else
          ## static_error('invalid replacement argument')
        ## end
      ## end
      sb:write((@string){&matchrepl.data[ri], matchrepl.size - ri})
      pos = endpos
    elseif pos < s.size then -- otherwise, skip one character
      sb:writebyte(s.data[pos])
      pos = pos + 1
    else -- end of subject
      break
    end
    if ms.anchor then break end
  end
  sb:write((@string){&s.data[pos], s.size - pos})
  return sb:promote(), n
end

-- Helper used by `string.match` and `string.matchview`.
local function string_match(s: string, pattern: string, init: facultative(isize)): (boolean, sequence(string))
  ## if init.type.is_niltype then
  local init: isize = 1
  ## else
  if init < 0 then init = (@isize)(s.size) + init + 1 end
  if init <= 0 then init = 1 end
  ## end
  local ms: StrPatt = StrPatt.create(s, pattern, false)
  local startpos: isize, endpos: isize = ms:match(init-1)
  local captures: sequence(string)
  if endpos ~= -1 then -- matched
    if ms.numcaptures > 0 then -- has captures
      captures:resize((@usize)(ms.numcaptures))
      for i:isize=0,<ms.numcaptures do
        local ok: boolean, capstr: string, capture: auto = ms:get_capture(i)
        assert(ok, capstr)
        assert(not capture:is_position(), 'position capture not supported yet')
        captures[(@usize)(i+1)] = capstr
      end
      return true, captures
    else -- nothing captured, then capture whole match
      captures[1] = ms.source:subview(startpos+1, endpos)
      return true, captures
    end
  else -- no match
    return false, captures
  end
end

--[[
Look for the first match of pattern in the string.
If it finds one, then returns true plus a sequence with the captured values,
otherwise it returns false plus an empty sequence.
If pattern specifies no captures, then the whole match is captured.
A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
]]
function string.match(s: string, pattern: string, init: facultative(isize)): (boolean, sequence(string))
  local ok: boolean, seq: sequence(string) = string_match(s, pattern, init)
  for i: usize = 1, (@usize)(#seq) do
    seq[i] = string.copy(seq[i])
  end
  return ok, seq
end

-- Like `string.match` but uses sub string views (see also `string.subview`).
function string.matchview(s: string, pattern: string, init: facultative(isize)): (boolean, sequence(string))
  return string_match(s, pattern, init)
end

----------------------------------------------------------------------------------------------------
-- String packing

local strpack: type = require 'detail.strpack'

--[[
Returns a binary string containing the values in `...`,
serialized in binary form (packed) according to the format string `fmt`.

For description of the format options,
see [Lua's format strings for pack](https://www.lua.org/manual/5.4/manual.html#6.4.2).
]]
function string.pack(fmt: string, ...: varargs): string
  return strpack.pack(fmt, ...)
end

--[[
Returns the values packed in string `s` (see `string.pack`) according to the format string `fmt`.
An optional `init` marks where to start reading in `s` (default is `1`).
After the read values, this function also returns the index of the first unread byte in `s`.

For description of the format options,
see [Lua's format strings for pack](https://www.lua.org/manual/5.4/manual.html#6.4.2).

Remarks: `fmt` must be a compile-time string.
]]
function string.unpack(fmt: string <comptime>, s: string, init: facultative(isize))
  return strpack.unpack(fmt, s, init)
end

--[[
Returns the size of a string resulting from string.pack with the given format.
The format string cannot have the variable-length options 's' or 'z'.

For description of the format options,
see [Lua's format strings for pack](https://www.lua.org/manual/5.4/manual.html#6.4.2).
]]
function string.packsize(fmt: string): isize
  return strpack.packsize(fmt)
end

local strconv: type = require 'detail.strconv'

----------------------------------------------------------------------------------------------------
-- String conversion

--[[
Convert a value to a string.
A new string will be always allocated.
The `__tostring` metamethod may be called,
in this case, it must always return a new allocated string.
]]
global function tostring(x: auto): string
  ##[[
  local xobjtype = x.type:implicit_deref_type()
  local xtype = x.type
  if xtype.is_enum then
    xtype = xtype.subtype
  end
  ]]
  ## if xtype.is_stringy then
    return string.copy(x)
  ## elseif xobjtype.metafields and xobjtype.metafields.__tostring then
    return x:__tostring()
  ## elseif xobjtype.metafields and xobjtype.metafields.__tostringview then
    return string.copy(x:__tostringview())
  ## elseif x.type.is_span and x.type.subtype == primtypes.byte then
    return string.copy((@string){data=x.data, size=x.size})
  ## elseif xtype.is_integral then
    local buf: [48]byte <noinit>
    ## if xtype.size <= primtypes.isize.size then
    local s: string = strconv.int2str(&buf, (@#[xtype.is_signed and primtypes.isize or primtypes.usize]#)(x), 10)
    ## else -- probably a large integer like int128
    local s: string = strconv.int2str(&buf, x, 10)
    ## end
    return string.copy(s)
  ## elseif xtype.is_pointer or xtype.is_function then
    local s: string = '(null)'
    local buf: [48]byte <noinit>
    if x ~= nilptr then
      s = strconv.int2str(&buf, (@usize)((@pointer)(x)), 16)
    end
    ## if xtype.is_function then
      return 'function: '..s
    ## else
      return string.copy(s)
    ## end
  ## elseif xtype.is_float then
    local buf: [64]byte <noinit>
    return string.copy(strconv.num2str(&buf, x))
  ## elseif xtype.is_boolean then
    return string.copy(x == true and 'true' or 'false')
  ## elseif xtype.is_niltype then
    return string.copy('nil')
  ## elseif xtype.is_nilptr then
    return string.copy('(null)')
  ## elseif xtype.is_polyfunction then
    return string.copy('polyfunction')
  ## elseif x.type.is_type then
    return 'type: '..#[tostring(x.value)]#
  ## else static_error("tostring: cannot convert type '%s' to a string", xtype) end
end

--[[
Convert a value to a string without performing new allocations.
The `__tostringview` metamethod may be called,
in this case, it must always return a non owned string reference
that the caller won't attempt to destroy.
]]
global function tostringview(x: auto): string
  ##[[
  local xobjtype = x.type:implicit_deref_type()
  local xtype = x.type
  if xtype.is_enum then
    xtype = xtype.subtype
  end
  ]]
  ## if xtype.is_stringy then
    return x
  ## elseif xobjtype.metafields and xobjtype.metafields.__tostringview then
    return x:__tostringview()
  ## else static_error("tostringview: cannot convert type '%s' to a string view", xtype) end
end

-- Convert a value to a number.
global function tonumber(x: auto, base: facultative(integer)): auto
  -- TODO: return nil in case of fail (like lua)
  ## if not base.type.is_niltype then
    ## static_assert(x.type.is_stringy, "string expected, got something else")
    local ok: boolean, i: integer = strconv.str2int(x, base)
    assert(ok, 'malformed integral number')
    return i
  ## elseif x.type.is_integral then
    return (@integer)(x)
  ## elseif x.type.is_float then
    return (@number)(x)
  ## elseif x.type.is_stringy then
    local ok: boolean, n: number = strconv.str2num(x)
    assert(ok, 'malformed number')
    return n
  ## else static_error("unable to convert value of type '%s' to a number", x.type) end
end

-- Convert a value to an integer.
global function tointeger(x: auto, base: facultative(integer)): integer
  ## if not base.type.is_niltype then
    ## static_assert(x.type.is_stringy, "string expected, got something else")
    local ok: boolean, i: integer = strconv.str2int(x, base)
    assert(ok, 'malformed integer')
    return i
  ## elseif x.type.is_scalar then
    return (@integer)(x)
  ## elseif x.type.is_stringy then
    local ok: boolean, i: integer = strconv.str2int(x, 0)
    assert(ok, 'malformed integer')
    return i
  ## else static_error("unable to convert value of type '%s' to an integer", x.type) end
end

return string
