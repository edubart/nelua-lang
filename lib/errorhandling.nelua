--[[
NOTE: This is HIGHLY experimental and not fully developed yet, be warned!

This module implements a Lua style exception system.
It implements `pcall` and `xpcall` functions that can be used to capture errors
raised from `error` and `assert` functions.

* TODO: handle call methods
* TODO: check function
]]

##[==[
--[[
For now all the compiler code is placed here,
later will be moved to the compiler sources
]]
local typedefs = require 'nelua.typedefs'
local cgenerator = require 'nelua.cgenerator'
local CEmitter = require 'nelua.cemitter'
local console = require 'nelua.utils.console'

console.warn 'using error handling module, it is highly experimental and incomplete!'

-- Add <noerror> new annotation
typedefs.function_annots.noerror = true

if not pragmas.noexceptions then
local orig_Call = cgenerator.visitors.Call
-- Hook all calls to return early in case a error is raised.
function cgenerator.visitors.Call(context, node, emitter, ...)
  local isblockcall = context:get_visiting_node(1).tag == 'Block'
  local funcscope = context.scope:get_up_scope_of_kind('is_function')
  local funcsym = funcscope and funcscope.funcsym
  local attr = node.attr
  local calleesym = attr.calleesym
  local function go()
    emitter:add_indent_ln('if(nelua_error_status) {')
    emitter:inc_indent()
    local scope = context.scope
    local retscope = scope:get_up_function_scope()
    assert(scope ~= retscope and retscope)
    local deferemitter = emitter:fork()
    cgenerator.emit_close_upscopes(context, deferemitter, scope, retscope, true)
    if not deferemitter:empty() then -- must clear error to execute defer code
      emitter:add_indent_ln('nelua_error_status = false;')
      emitter:add_value(deferemitter)
      emitter:add_indent_ln('nelua_error_status = true;')
    end
    if #funcsym.type.rettypes > 1 then
      local rettypename = context:funcrettypename(funcsym.type)
      emitter:add_indent('return')
      emitter:add_zeroed_type_literal(rettypename, rettypename);
      emitter:add_ln(';')
    elseif #funcsym.type.rettypes == 1 then
      local rettypename = context:funcrettypename(funcsym.type)
      emitter:add_indent('return ')
      emitter:add_zeroed_type_literal(funcsym.type.rettypes[1], true)
      emitter:add_ln(';')
    else
      emitter:add_indent_ln('return;')
    end
    emitter:dec_indent()
    emitter:add_indent_ln('}')
  end
  local pragmas = context.pragmas
  if calleesym and funcsym and
    calleesym.type.sideeffect and funcsym.type.sideeffect and
    not calleesym.cimport and
    not calleesym.noerror and not funcsym.noerror and not pragmas.noerror and
    not calleesym.noreturn and not funcsym.noreturn and not pragmas.noreturn then
    if isblockcall then
      orig_Call(context, node, emitter, ...)
      go()
    else
      emitter:add_ln('({')
      emitter:inc_indent()
      if attr.usemultirets then
        local callrettypename = context:funcrettypename(node.attr.calleetype)
        emitter:add_indent(callrettypename, ' __callret = ')
      else
        emitter:add_indent(attr.type, ' __callret = ')
      end
      orig_Call(context, node, emitter, ...)
      emitter:add_ln(';')
      go()
      emitter:add_indent_ln('__callret;')
      emitter:dec_indent()
      emitter:add_indent('})')
    end
  else
    orig_Call(context, node, emitter, ...)
  end
end
end
]==]

-- C imports

local FILE: type <cimport,cinclude'<stdio.h>',forwarddecl> = @record{}
local stderr: *FILE <cimport,cinclude'<stdio.h>'>
local function fwrite(ptr: pointer, size: csize, n: csize, fp: *FILE): csize <cimport,cinclude'<stdio.h>'> end
local function fflush(fp: *FILE): cint <cimport,cinclude'<stdio.h>'> end
local function fputc(c: cint, stream: *FILE): cint <cimport,cinclude'<stdio.h>'> end
local function abort() <cimport,cinclude'<stdlib.h>'> end
local function exit(status: cint): void <cimport,cinclude'<stdlib.h>'> end
local function NELUA_UBSAN_UNREACHABLE(): void <cimport,cinclude[[
/* Macro used to generate traceback on aborts when sanitizing. */
#if defined(__clang__) && defined(__has_feature)
  #if __has_feature(undefined_behavior_sanitizer)
    #define NELUA_UBSAN_UNREACHABLE __builtin_unreachable
  #endif
#elif defined(__gnu_linux__) && defined(__GNUC__) && __GNUC__ >= 5
  extern void __ubsan_handle_builtin_unreachable(void*) __attribute__((weak));
  #define NELUA_UBSAN_UNREACHABLE() {if(&__ubsan_handle_builtin_unreachable) __builtin_unreachable();}
#endif
#ifndef NELUA_UBSAN_UNREACHABLE
  #define NELUA_UBSAN_UNREACHABLE()
#endif
]]> end
local function NELUA_TRAP(): void <cimport,cinclude[[
/* Macro to simulate an illegal instruction to force a crash. */
#if defined(__clang__) || defined(__GNUC__)
  #define NELUA_TRAP __builtin_trap
#else
  #dfine NELUA_TRAP() {*((volatile int*)0x0) = 0;}
#endif
]]> end

--[[
Terminate the application abnormally with message `message`.
This function never returns.

Used to raise unrecoverable errors.
]]
global function panic(msg: facultative(string)): void <noinline,noreturn,noerror>
  -- print error message to stderr
  ## if not msg.type.is_niltype then
  if msg.size > 0 then
    fwrite(msg.data, 1, msg.size, stderr)
    fputc('\n'_b, stderr)
    fflush(stderr)
  end
  ## end
  NELUA_UBSAN_UNREACHABLE() -- trap with error traceback when using undefined sanitizer
  ## if pragmas.abort == 'exit' then -- call system's exit()
    exit(-1)
  ## elseif pragmas.abort == 'trap' then -- generate invalid instruction
    NELUA_TRAP()
  ## else -- call system's abort()
    abort()
  ## end
end

## if not pragmas.noexceptions then
-- Current raised error message.
local nelua_error_msg: string <threadlocal>

-- Current raised error status, `true` if an error was raised.
local nelua_error_status: boolean <threadlocal,nodce>

-- Current error handler.
local nelua_error_handler: function(string): string <threadlocal>
## end

-- Macro used to raise errors in `error` and `assert`.
## local function raise_impl(copy)
  ## if not pragmas.noexceptions then
    if nelua_error_handler then
      ## if copy then
      msg = string.copy(msg)
      ## end
      local error_handler: auto = nelua_error_handler
      nelua_error_handler = nilptr
      nelua_error_status = true
      nelua_error_msg = error_handler(msg)
    else
      panic(msg)
    end
  ## else
    panic(msg)
  ## end
## end

--[[
Raises an error with message `msg`. This function never returns.

Usually information about the error position is added at the beginning of the message.

The `level` argument specifies how to get the error position.
Passing a `level` 0 avoids the addition of error position information to the message.
With `level` 1 (the default), the error position is where the error function was called.
Level 2 or above at this moment has the same effect as 1, but in the future
may change.

Raised errors can be caught with `pcall` or `xpcall`.
]]
global function error(msg: facultative(string), level: facultative(isize)): void <noinline,alwayspoly>
  ## pragmapush{noerror=true} -- avoid raising another error while raising an error
  do
    ## if level.type.is_niltype then
    local level: isize = 1
    ## end
    ## local locmsg = context.state.inpolyeval.srcnode:format_message('runtime error', 'error!')
    ## if msg.type.is_niltype then
    local msg: string = #[locmsg]#
    ## raise_impl(true)
    ## else
    if level > 0 then -- appends error location
      local sb: stringbuilder
      sb:write(#[locmsg:match('^(.*)error!')]#, msg, #[locmsg:match('error!(.*)$')]#)
      msg = sb:promote()
      ## raise_impl(e)
    else
      ## raise_impl(true)
    end
    ## end
  end
  ## pragmapop()
end

--[[
Raises an error if the value `v` is evaluated to `false`, otherwise, returns all its arguments.
In case of error, `message` is the error message, when absent, it defaults to `"assertion failed!"`.

Raised errors can be caught with `pcall` or `xpcall`.
]]
global function assert(v: auto, message: auto, ...: varargs) <alwayspoly>
  ## pragmapush{noerror=true} -- avoid raising another error while raising an error
  if unlikely(not v) then
    ## local locmsg = context.state.inpolyeval.srcnode:format_message('runtime error', 'assertion failed!')
    ## if not message.type.is_niltype then
    local sb: stringbuilder
    sb:write(#[locmsg:match('^(.*)assertion failed!')]#, message, #[locmsg:match('assertion failed!(.*)$')]#)
    local msg: string = sb:promote()
    ## raise_impl()
    ## else
    local msg: string = #[locmsg]#
    ## raise_impl(true)
    ## end
  end
  ## pragmapop()
  ## if not v.type.is_niltype and not message.type.is_niltype then
  return v, message, ...
  ## elseif not v.type.is_niltype then
  return v
  ## end
end

## if not pragmas.noexceptions then

-- Macro used to implement `xpcall` and `pcall`.
## local function xpcall_impl()
  -- TODO: find a way to forward more multiple returns in a dynamic way
  local oldmsghandler: auto = nelua_error_handler
  nelua_error_handler = msghandler
  local r1, r2, r3, r4 = f(...)
  nelua_error_handler = oldmsghandler
  if nelua_error_status then
    local errmsg: string = nelua_error_msg
    nelua_error_status = false
    nelua_error_msg = (@string){}
    return false, errmsg, r1, r2, r3, r4
  end
  return true, (@string){}, r1, r2, r3, r4
## end

-- Default error message handler for `pcall`.
local function pcall_msghandler(msg: string): string <noerror>
  -- TODO: find a way to add runtime traceback
  return msg
end

--[[
Calls the function `f` with the given arguments in protected mode.
This means that any error inside `f` is not propagated, instead,
`pcall` catches the error and returns a status code.

Its first result is the status, which is `true` if the call succeeds without errors.
Its second result is the error message, which is empty if the call succeeds without errors.
After the second result, `pcall` returns up to 4 results from the call.
In case of any error, `pcall` returns `false` plus the error message and empty results.
]]
global function pcall(f: auto, ...: varargs) <noinline,noerror>
  local msghandler: auto = pcall_msghandler
  ## xpcall_impl()
end

--[[
Like `pcall`, but it sets a new message handler `msghandler`.
In case of any runtime error, this handler will be called with the error message
and its return value will be the message returned by `xpcall`.

Typically, the message handler is used to add more debug information to the error message,
such as a stack traceback.
Such information cannot be gathered after the return of `pcall`,
since by then the stack has unwound.
]]
global function xpcall(f: auto, msghandler: function(string): string, ...: varargs) <noinline,noerror>
  assert(msghandler ~= nilptr, 'bad message handler')
  ## xpcall_impl()
end

## end

--[[
Some strings methods are used in the above polymorphic functions,
however we must require after the following modules it may also use them.
]]
require 'string'
